{"ast":null,"code":"var _jsxFileName = \"/Users/Juliana/Projects/GitHub/lordoftherings/src/views/quotes.js\",\n    _s = $RefreshSig$();\n\nimport '../assets/quotes.css';\nimport { useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Quotes(props) {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState();\n  const [character, setCharacter] = useState();\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchData = async () => {\n      var _quotes$docs;\n\n      const rawQuotes = await fetch(props.quote, {\n        headers: props.headers\n      });\n      const quotes = await rawQuotes.json();\n      const q = quotes.docs[Math.floor(Math.random() * (quotes === null || quotes === void 0 ? void 0 : (_quotes$docs = quotes.docs) === null || _quotes$docs === void 0 ? void 0 : _quotes$docs.length))];\n      setQuote(q.dialog);\n      const rawCharacters = await fetch(props.charID + q.character, {\n        headers: props.headers\n      });\n      const characters = await rawCharacters.json();\n      const c = characters.docs[0];\n      setCharacter(c.name);\n    };\n\n    fetchData();\n    setLoading(false);\n  }, [props]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"center\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"Quotes\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"blockquote\", {\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"cite\", {\n        children: [\"- \", character]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quotes, \"NPXarcP78qsRQCFHMPCr/0rE9Kg=\");\n\n_c = Quotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"sources":["/Users/Juliana/Projects/GitHub/lordoftherings/src/views/quotes.js"],"names":["useEffect","useState","Container","Quotes","props","loading","setLoading","quote","setQuote","character","setCharacter","fetchData","rawQuotes","fetch","headers","quotes","json","q","docs","Math","floor","random","length","dialog","rawCharacters","charID","characters","c","name"],"mappings":";;;AAAA,OAAO,sBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAMK,SAAS,GAAG,YAAY;AAAA;;AAC5B,YAAMC,SAAS,GAAG,MAAMC,KAAK,CAACT,KAAK,CAACG,KAAP,EAAc;AAAEO,QAAAA,OAAO,EAAEV,KAAK,CAACU;AAAjB,OAAd,CAA7B;AACA,YAAMC,MAAM,GAAG,MAAMH,SAAS,CAACI,IAAV,EAArB;AACA,YAAMC,CAAC,GAAGF,MAAM,CAACG,IAAP,CAAYC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgBN,MAAhB,aAAgBA,MAAhB,uCAAgBA,MAAM,CAAEG,IAAxB,iDAAgB,aAAcI,MAA9B,CAAX,CAAZ,CAAV;AACAd,MAAAA,QAAQ,CAACS,CAAC,CAACM,MAAH,CAAR;AAEA,YAAMC,aAAa,GAAG,MAAMX,KAAK,CAACT,KAAK,CAACqB,MAAN,GAAeR,CAAC,CAACR,SAAlB,EAA6B;AAAEK,QAAAA,OAAO,EAAEV,KAAK,CAACU;AAAjB,OAA7B,CAAjC;AACA,YAAMY,UAAU,GAAG,MAAMF,aAAa,CAACR,IAAd,EAAzB;AACA,YAAMW,CAAC,GAAGD,UAAU,CAACR,IAAX,CAAgB,CAAhB,CAAV;AACAR,MAAAA,YAAY,CAACiB,CAAC,CAACC,IAAH,CAAZ;AACD,KAVD;;AAYAjB,IAAAA,SAAS;AACTL,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAhBQ,EAgBN,CAACF,KAAD,CAhBM,CAAT;;AAkBA,MAAGC,OAAH,EAAY;AACV,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAED,sBACE;AAAM,IAAA,EAAE,EAAC,QAAT;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,aAArB;AAAA,8BACE;AAAA,kBAAaE;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,yBAASE,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GArCeN,M;;KAAAA,M","sourcesContent":["import '../assets/quotes.css';\nimport { useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport function Quotes(props) {\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState()\n  const [character, setCharacter] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchData = async () => {\n      const rawQuotes = await fetch(props.quote, { headers: props.headers });\n      const quotes = await rawQuotes.json();\n      const q = quotes.docs[Math.floor(Math.random() * quotes?.docs?.length)];\n      setQuote(q.dialog);\n      \n      const rawCharacters = await fetch(props.charID + q.character, { headers: props.headers });\n      const characters = await rawCharacters.json();\n      const c = characters.docs[0];\n      setCharacter(c.name);\n    };\n\n    fetchData();\n    setLoading(false);\n  }, [props]);\n\n  if(loading) {\n    return (\n      <center>Loading...</center>\n    );\n  }\n\n  return (\n    <main id=\"Quotes\">\n      <Container className='text-center'>\n        <blockquote>{quote}</blockquote>\n        <cite>- {character}</cite>\n      </Container>\n    </main>\n  );\n}"]},"metadata":{},"sourceType":"module"}